using ComicRentalSystem_14Days.Models;
using ComicRentalSystem_14Days.Services;
using ComicRentalSystem_14Days.Interfaces; // 技術點3: 引用介面命名空間
using System;
using System.IO; // For IOException
using System.Windows.Forms;
using System.Text.RegularExpressions; // For phone number validation

namespace ComicRentalSystem_14Days.Forms
{
    public partial class MemberEditForm : ComicRentalSystem_14Days.BaseForm // 技術點3: 繼承 BaseForm
    {
        private readonly MemberService _memberService;
        private Member? _editableMember; // 要編輯的會員物件，如果是 null，則表示是新增模式
        private bool _isEditMode;
        // Logger is inherited from BaseForm (protected ILogger? Logger)

        // 建構函式修改以接收 ILogger 並傳遞給 BaseForm
        // 技術點4: 過載 (這個建構函式本身就是對應不同用途的設計)
        public MemberEditForm(Member? memberToEdit, MemberService memberService, ILogger logger) : base(logger) // 技術點4: 多型 (傳遞 ILogger 給 BaseForm)
        {
            InitializeComponent();
            // Logger is already set by BaseForm's constructor

            _memberService = memberService ?? throw new ArgumentNullException(nameof(memberService));
            _editableMember = memberToEdit;
            _isEditMode = (_editableMember != null);

            LogActivity($"MemberEditForm initializing. Mode: {(_isEditMode ? "Edit" : "Add")}" +
                        (_isEditMode && _editableMember != null ? $", MemberID: {_editableMember.Id}" : ""));

            if (_isEditMode && _editableMember != null)
            {
                this.Text = "編輯會員";
                LoadMemberData();
            }
            else
            {
                this.Text = "新增會員";
                // ID 將由 MemberService 自動產生
            }
            LogActivity("MemberEditForm initialized.");
        }

        private void LoadMemberData()
        {
            if (_editableMember == null)
            {
                LogActivity("LoadMemberData called but _editableMember is null (should not happen in edit mode).");
                return;
            }

            LogActivity($"Loading data for member ID: {_editableMember.Id}, Name: '{_editableMember.Name}'.");
            // 假設你的控制項名稱是 txtName, txtPhoneNumber
            txtName.Text = _editableMember.Name;
            txtPhoneNumber.Text = _editableMember.PhoneNumber;
            LogActivity("Member data loaded into form controls.");
        }

        // 技術點 #6: 視窗應用程式的事件處理
        private void btnSaveMember_Click(object sender, EventArgs e)
        {
            LogActivity("Save Member button clicked.");

            // 1. 輸入驗證
            if (string.IsNullOrWhiteSpace(txtName.Text))
            {
                LogActivity("Validation failed: Member Name is empty.");
                MessageBox.Show("姓名不得為空。", "驗證錯誤", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                txtName.Focus();
                return;
            }

            string phoneNumber = txtPhoneNumber.Text.Trim();
            if (string.IsNullOrWhiteSpace(phoneNumber))
            {
                LogActivity("Validation failed: Phone Number is empty.");
                MessageBox.Show("電話號碼不得為空。", "驗證錯誤", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                txtPhoneNumber.Focus();
                return;
            }

            // 可選：更嚴格的電話號碼格式驗證 (例如：只允許數字，特定長度)
            // Regex for a simple numeric phone number, adjust as needed for local formats
            // This example allows 7-15 digits, optionally with a leading '+'
            // if (!Regex.IsMatch(phoneNumber, @"^\+?[0-9]{7,15}$"))
            // {
            //     LogActivity($"Validation failed: Phone Number '{phoneNumber}' has an invalid format.");
            //     MessageBox.Show("電話號碼格式不正確。請輸入有效的電話號碼 (例如：純數字，長度7-15位)。", "驗證錯誤", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            //     txtPhoneNumber.Focus();
            //     return;
            // }

            LogActivity("Input validation passed for member details.");

            try // 技術點 #5: 例外處理
            {
                if (_isEditMode && _editableMember != null) // 編輯模式
                {
                    LogActivity($"Attempting to save changes for existing member ID: {_editableMember.Id}.");
                    _editableMember.Name = txtName.Text.Trim();
                    _editableMember.PhoneNumber = phoneNumber;

                    _memberService.UpdateMember(_editableMember); // Service 層已有詳細日誌
                    LogActivity($"Member ID: {_editableMember.Id} updated successfully.");
                    MessageBox.Show("會員資料已更新。", "成功", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                else // 新增模式
                {
                    LogActivity("Attempting to add new member.");
                    Member newMember = new Member
                    {
                        // Id is generated by MemberService
                        Name = txtName.Text.Trim(),
                        PhoneNumber = phoneNumber
                    };
                    _memberService.AddMember(newMember); // Service 層已有詳細日誌
                    LogActivity($"New member '{newMember.Name}' (ID: {newMember.Id}) added successfully.");
                    MessageBox.Show("會員已成功新增。", "成功", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }

                this.DialogResult = DialogResult.OK;
                LogActivity("MemberEditForm closing with DialogResult.OK.");
                this.Close();
            }
            catch (InvalidOperationException opEx) // 特定業務邏輯錯誤 (例如：電話號碼重複 - 如果服務層有此檢查)
            {
                LogErrorActivity($"Operation error while saving member: {opEx.Message}", opEx);
                MessageBox.Show(opEx.Message, "操作錯誤", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (IOException ioEx) // 檔案讀寫錯誤
            {
                LogErrorActivity($"File I/O error while saving member: {ioEx.Message}", ioEx);
                MessageBox.Show($"儲存會員失敗，檔案存取錯誤: {ioEx.Message}", "儲存失敗", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (Exception ex) // 其他未預期錯誤
            {
                LogErrorActivity($"Unexpected error while saving member: {ex.Message}", ex);
                MessageBox.Show($"儲存會員時發生未預期錯誤: {ex.Message}", "嚴重錯誤", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btnCancelMember_Click(object sender, EventArgs e)
        {
            LogActivity("Cancel Member button clicked. MemberEditForm closing with DialogResult.Cancel.");
            this.DialogResult = DialogResult.Cancel;
            this.Close();
        }

        private void MemberEditForm_Load(object sender, EventArgs e)
        {
            // LogActivity is already called at the end of the constructor.
            LogActivity("MemberEditForm finished loading.");
        }
    }
}